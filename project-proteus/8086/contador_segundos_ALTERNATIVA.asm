; I/O Address Bus decode - every device gets 0x200 addresses */

IO0  EQU  0000h
IO1  EQU  0200h
IO2  EQU  0400h
IO3  EQU  0600h
IO4  EQU  0800h
IO5  EQU  0A00h
IO6  EQU  0C00h
IO7  EQU  0E00h
IO8  EQU  1000h
IO9  EQU  1200h
IO10 EQU  1400h
IO11 EQU  1600h
IO12 EQU  1800h
IO13 EQU  1A00h
IO14 EQU  1C00h
IO15 EQU  1E00h

;MEU CODIGO
code      SEGMENT 'code'
	  assume    CS:code,DS:data

	  org 0000h
;RESERVADO PARA VETOR DE INTERRUPCOES
	  org 0400h
;MEU CODIGO

inicio:
    MOV AX,DATA
    MOV DS,AX
    
    MOV CH, 0;
    MOV CL, 0;

LOO:

	;MOV DX, IO0; CTRL DE LEDS
	;OUT DX, AL ; ESCREVE AL NA CTRL DE LEDS

	;MOV DX, IO1; CTRL DE CHAVES
	;IN  AL, DX; AL CONTEM ESTADO DAS 8 CHAVES

	; IO2 LED DEZENA
	; IO3 LED UNIDADE

	; CH CTRL DEZENA
	; CL CTRL UNIDADE

	JMP INC_UNIDADE
	JMP LOO
	
ESCRITA:
	MOV DX, IO2; CTRL 7SEG U12
	MOV BH, 0D
	MOV BL, CH
	MOV AL, BIN7SEG[BX]
	OUT DX, AL

	MOV DX, IO3; CTRL 7SEG U13
	MOV BH, 0D
	MOV BL, CL
	MOV AL, BIN7SEG[BX]
	OUT DX, AL;

	JMP LOO

INC_UNIDADE:
	; INCREMENTAR, é possível usar
	; ADD CL,1 ou
	INC CL
	CMP CL, 10D
	JE ZERAUNIDADE

	JMP ESCRITA;

ZERAUNIDADE:
	MOV CL, 0D

	ADD CH, 1D
	CMP CH, 6D
	JE ZERADEZENA

	JMP ESCRITA;

ZERADEZENA:
	MOV CL, 0D
	MOV CH, 0D

	JMP ESCRITA;

code ends

;MILHA PILHA
STACK SEGMENT STACK      
DW 128 DUP(0) 
STACK ENDS 

;MEUS DADOS
DATA      SEGMENT 
		  BIN7SEG DB 00111111B, 00000110B, 01011011B, 01001111B, 01100110B, 01101101B, 01111101B, 00000111B, 01111111B, 01101111B
DATA      ENDS

end inicio
