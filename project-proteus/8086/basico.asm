; I/O Address Bus decode - every device gets 0x200 addresses */

IO0  EQU  0000h
IO1  EQU  0200h
IO2  EQU  0400h
IO3  EQU  0600h
IO4  EQU  0800h
IO5  EQU  0A00h
IO6  EQU  0C00h
IO7  EQU  0E00h
IO8  EQU  1000h
IO9  EQU  1200h
IO10 EQU  1400h
IO11 EQU  1600h
IO12 EQU  1800h
IO13 EQU  1A00h
IO14 EQU  1C00h
IO15 EQU  1E00h

ADR_USART_DATA EQU  (IO4 + 00h) ; 800H
;ONDE VOCE VAI MANDAR E RECEBER DADOS DO 8251

ADR_USART_CMD  EQU  (IO4 + 02h) ; 802H
;É O LOCAL ONDE VOCE VAI ESCREVER PARA PROGRAMAR O 8251

ADR_USART_STAT EQU  (IO4 + 02h) ; 802H
;RETORNA O STATUS SE UM CARACTER FOI DIGITADO
;RETORNA O STATUS SE POSSO TRANSMITIR CARACTER PARA O TERMINAL


;MEU CODIGO
code      SEGMENT 'code'
	  assume    CS:code,DS:data

	  org 0000h
;RESERVADO PARA VETOR DE INTERRUPCOES
	  org 0400h
;MEU CODIGO

INICIALIZA_8251:  ; 19200,8,N,1                                   
   MOV AL,0
   MOV DX, ADR_USART_CMD
   OUT DX,AL
   OUT DX,AL
   OUT DX,AL
   MOV AL,40H
   OUT DX,AL
   MOV AL,4DH
   OUT DX,AL
   MOV AL,37H
   OUT DX,AL
   RET

MANDA_CARACTER:
   PUSHF
   PUSH DX
   PUSH AX  ; SALVA AL   
BUSY:
   MOV DX, ADR_USART_STAT
   IN  AL,DX
   TEST AL,1
   JZ BUSY
   MOV DX, ADR_USART_DATA
   POP AX  ; RESTAURA AL
   OUT DX,AL
   POP DX
   POPF
   RET

RECEBE_CARACTER: ; RETORNA EM AL O CARACTER DIGITADO
   PUSHF
   PUSH DX
AGUARDA_CARACTER:
   MOV DX, ADR_USART_STAT
   IN  AL,DX
   TEST AL,2
   JZ AGUARDA_CARACTER
   MOV DX, ADR_USART_DATA
   IN AL,DX
   SHR AL,1
NAO_RECEBIDO:
   POP DX
   POPF
   RET 

inicio:
    MOV AX,DATA
    MOV DS,AX

	CALL INICIALIZA_8251 ; PROGRAMA 19200,N,8,1

	LEA BX, MENS1
	CALL MANDA_TEXTO

	LEA BX, STRING
	CALL ROTINA_RECEBE_TEXTO

	LEA BX, MENS2
	CALL MANDA_TEXTO

	CALL RECEBE_CARACTER ; AL CONTEM O DADO DIGITADO (ASCII)

	LEA BX, MENS3
	CALL MANDA_TEXTO

	CALL MANDA_CARACTER

	LEA BX, STRING
	CALL PROCURA_CARACTER_ROTINA

FIM:	
	JMP FIM

PROCURA_CARACTER_ROTINA:
PROCURA_CARACTER:
		PUSHF
		PUSH AX
		MOV AH, [BX]  ; PEGA CONTEUDO APONTADO POR [BX] E JOGA EM AH
		CMP AH, 0
		JE  NAO_ACHOU
		CMP AH, AL ; COMPARA COM AL = O QUE FOI DIGITADO
		JE  ACHOU
		INC BX
		JMP PROCURA_CARACTER

NAO_ACHOU:
		LEA BX, MENS4
		CALL MANDA_TEXTO
		JMP FIM_PROCURA_CARACTER

ACHOU:
		LEA BX, MENS5
		CALL MANDA_TEXTO

FIM_PROCURA_CARACTER:
		POP AX
		POPF
		RET

MANDA_TEXTO:
	PUSHF
	PUSH AX ;PRESERVA CONTEXTO
COMPARA_CARACTER:
	MOV AL,[BX]
	CMP AL,0 ; FIM DE TEXTO
	JE SAI_MANDA_TEXTO ; SE SIM, SAI SUBPROGRAMA
	CALL MANDA_CARACTER ; IMPRIME VALOR DE AL
	INC BX ; APONTA PARA PROXIMO CARACTER
	JMP COMPARA_CARACTER
SAI_MANDA_TEXTO:
	POP AX ;RESTAURA CONTEXTO
	POPF
	RET ; RETORNA PARA UMA LINHA DEPOIS DO CALL

ROTINA_RECEBE_TEXTO:
   PUSHF 
   PUSH AX
   PUSH CX
   MOV CX,0
RECEBE_TEXTO:
   CALL RECEBE_CARACTER
   CMP  AL,13 ;13 = ENTER
   JE   SAI_RECEBE_TEXTO
   CMP  AL,8 ;BACKSPACE
   JE   BACKSPACE
   CMP  CX,64
   JE   RECEBE_TEXTO
   CALL MANDA_CARACTER	
   MOV  [BX],AL
   INC  BX
   INC  CX
   MOV  AL,0
   MOV  [BX],AL ;NULL
   JMP  RECEBE_TEXTO  
   DEC  CX
   CMP  CX,0
   JE   SAI_RECEBE_TEXTO

SAI_RECEBE_TEXTO:   
   POP CX
   POP AX
   POPF
   RET
   
BACKSPACE:
   CMP  CX,0
   JE   RECEBE_TEXTO
   CALL MANDA_CARACTER
   DEC  CX
   DEC  BX
   MOV  AL,0
   MOV  [BX],AL
   JMP  RECEBE_TEXTO

ROTINA_MAIUSCULO:
	PUSHF
	PUSH AX	
MAIUSCULO:
	MOV AL, [BX]
	CMP AL,  0 ; NULL
	JE  FIM_MAIUSCULO
	CMP AL, 'a'
	JL  IGNORA
	CMP AL, 'z'
	JG  IGNORA
	MOV AL, 32
	SUB [BX], AL
	INC BX
	JMP MAIUSCULO
IGNORA:
	ADD BX,1
	JMP MAIUSCULO
FIM_MAIUSCULO:
	POP AX
	POPF
	RET
code ends

;MILHA PILHA
STACK SEGMENT STACK      
DW 128 DUP(0) 
STACK ENDS 

;MEUS DADOS
DATA      SEGMENT  
STRING DB 65 DUP(0)
MENS1 DB "ENTRE COM UMA STRING",13,10,0
MENS2 DB 13,10,"ENTRE COM UM CARACTER",13,10,0
MENS3 DB "STATUS DO CARACTER ",0
MENS4 DB " : AUSENTE",13,10,0
MENS5 DB " : PRESENTE",13,10,0
DATA      ENDS

end inicio
